use crate::config::{Config, config_validate};
use regex;

/// Tests configuration loading and validation
pub fn test_configuration(config: &Config) {
    println!("\nüìã –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...");

    println!("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞:");
    println!("  URL –Ω–æ–≤–æ—Å—Ç–µ–π: {}", config.news_feed_url);
    println!("  –°–µ–ª–µ–∫—Ç–æ—Ä: {}", config.news_item_selector);
    println!("  –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ: {}", config.title_regex_pattern);
    println!("  –¢–æ–∫–µ–Ω Telegram –±–æ—Ç–∞: {}", if config.telegram_bot_token.len() > 10 {
        format!("{}...{}", &config.telegram_bot_token[..5], &config.telegram_bot_token[config.telegram_bot_token.len()-5..])
    } else {
        "–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω".to_string()
    });
    println!("  ID —á–∞—Ç–∞ Telegram: {}", config.telegram_chat_id);

    // Test regex compilation
    match regex::Regex::new(&config.title_regex_pattern) {
        Ok(_) => println!("–†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ"),
        Err(e) => println!("–†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ: {}", e)
    }

    // Validate the entire configuration
    if config_validate(config) {
        println!("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞");
    } else {
        println!("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞");
    }
} 