use crate::library::dialog::DialogBuilder;

pub fn dialog_diagnostic() -> Result<(), std::io::Error> {
    let dialog = DialogBuilder::new();
    
    dialog.title("üöÄ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Ä–∞–±–æ—Ç—ã —Å –¥–∏–∞–ª–æ–≥–∞–º–∏");

    let hero_vec = vec!["–ï–≤–ø–∞—Ç–∏–π", "–ë–∏–ª–ª", "–ï—Å–∏–∫", "–ê–±–¥—É–ª–ª–∞"];
    let car_color_vec = vec!["–ö—Ä–∞—Å–Ω—ã–π", "–°–∏–Ω–∏–π", "–ó–µ–ª–µ–Ω—ã–π", "–ñ–µ–ª—Ç—ã–π"];
    
    let hero = dialog.select(
        "–í—ã–±–µ—Ä–∏—Ç–µ –ª—é–±–∏–º–æ–≥–æ –≥–µ—Ä–æ—è",
        &hero_vec
    )?;

    let hero_name = hero_vec[hero];
    
    let car = dialog.input("–í–≤–µ–¥–∏—Ç–µ –º–∞—Ä–∫—É –∞–≤—Ç–æ–º–æ–±–∏–ª—è", Some("BMW"))?;

    let colors = dialog.multi_select(
      "–í—ã–±–µ—Ä–∏—Ç–µ —Ü–≤–µ—Ç –º–∞—à–∏–Ω—ã",
      &car_color_vec
    )?;

    let color = if colors.is_empty() {
      "–ø—Ä–æ–∑—Ä–∞—á–Ω–æ–≥–æ"
    } else if colors.len() < 2 {
      let color_name = car_color_vec[colors[0]];
      match color_name {
        "–ö—Ä–∞—Å–Ω—ã–π" => "–∫—Ä–∞—Å–Ω–æ–≥–æ",
        "–°–∏–Ω–∏–π" => "—Å–∏–Ω–µ–≥–æ",
        "–ó–µ–ª–µ–Ω—ã–π" => "–∑–µ–ª–µ–Ω–æ–≥–æ",
        "–ñ–µ–ª—Ç—ã–π" => "–∂–µ–ª—Ç–æ–≥–æ",
        _ => "–Ω–µ–ø–æ–Ω—è—Ç–Ω–æ–≥–æ",
      }
       
    } else {
        "–Ω–µ–ø–æ–Ω—è—Ç–Ω–æ–≥–æ"
    };
    
    let confirm = dialog.confirm("–•–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ—Ä–æ—è –Ω–∞ –±–æ—Ä—å–±—É —Å –º–æ–Ω—Å—Ç—Ä–∞–º–∏?", true)?;
    
    if confirm {
        dialog.success(&format!("{} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –±–æ—Ä—å–±—É —Å –º–æ–Ω—Å—Ç—Ä–∞–º–∏ –Ω–∞ –º–∞—à–∏–Ω–µ {} {} —Ü–≤–µ—Ç–∞", hero_name, car, color));
    } else {
        dialog.info("–û—Ç–ø—Ä–∞–≤–∫–∞ –≥–µ—Ä–æ—è –æ—Ç–º–µ–Ω–µ–Ω–∞");
    }
    
    Ok(())
}